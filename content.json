{"meta":{"title":"天空很蓝","subtitle":"the sky is blue","description":"","author":"rainerliu","url":"https://rainerpiao.github.io","root":"/"},"pages":[{"title":"about","date":"2022-01-02T06:35:11.000Z","updated":"2022-01-02T06:35:23.564Z","comments":true,"path":"about/index.html","permalink":"https://rainerpiao.github.io/about/index.html","excerpt":"","text":""},{"title":"contact","date":"2022-01-02T06:35:35.000Z","updated":"2022-01-02T06:35:48.150Z","comments":true,"path":"contact/index.html","permalink":"https://rainerpiao.github.io/contact/index.html","excerpt":"","text":""},{"title":"friends","date":"2022-01-02T06:36:31.000Z","updated":"2022-01-02T06:36:48.776Z","comments":true,"path":"friends/index.html","permalink":"https://rainerpiao.github.io/friends/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-01-02T06:33:55.000Z","updated":"2022-01-02T07:52:55.107Z","comments":true,"path":"tags/index.html","permalink":"https://rainerpiao.github.io/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2022-01-02T06:31:51.000Z","updated":"2022-01-02T08:04:15.445Z","comments":true,"path":"categories/index.html","permalink":"https://rainerpiao.github.io/categories/index.html","excerpt":"","text":""},{"title":"404","date":"2022-01-02T06:39:56.000Z","updated":"2022-01-02T06:40:28.511Z","comments":true,"path":"404/index.html","permalink":"https://rainerpiao.github.io/404/index.html","excerpt":"","text":""}],"posts":[{"title":"Vue2项目中集成Matomo","slug":"hello-matomo","date":"2022-03-25T06:14:20.000Z","updated":"2022-03-25T06:17:21.313Z","comments":true,"path":"2022/03/25/hello-matomo/","link":"","permalink":"https://rainerpiao.github.io/2022/03/25/hello-matomo/","excerpt":"","text":"安装“vue-matomo”: “3.14.0-0” 引用matomo在main.js进行引用 import VueMatomo from 'vue-matomo'; Vue.use(VueMatomo, { // Configure your matomo server and site by providing host: process.env.MATOMO, siteId: process.env.MATOMO_SITE, // Changes the default .js and .php endpoint's filename // Default: 'matomo' trackerFileName: 'matomo', // Overrides the autogenerated tracker endpoint entirely // Default: undefined // trackerUrl: 'https://example.com/whatever/endpoint/you/have', // Overrides the autogenerated tracker script path entirely // Default: undefined // trackerScriptUrl: 'https://example.com/whatever/script/path/you/have', // Enables automatically registering pageviews on the router // router: router, // Enables link tracking on regular links. Note that this won't // work for routing links (ie. internal Vue router links) // Default: true enableLinkTracking: true, // Require consent before sending tracking information to matomo // Default: false requireConsent: false, // Whether to track the initial page view // Default: true trackInitialView: true, // Run Matomo without cookies // Default: false disableCookies: false, // Enable the heartbeat timer (https://developer.matomo.org/guides/tracking-javascript-guide#accurately-measure-the-time-spent-on-each-page) // Default: false enableHeartBeatTimer: true, // Set the heartbeat timer interval // Default: 15 heartBeatTimerInterval: 15, // Whether or not to log debug information // Default: false debug: false, // UserID passed to Matomo (see https://developer.matomo.org/guides/tracking-javascript-guide#user-id) // Default: undefined // userId: undefined, userId: localStorage.getItem('uid'), // userId: store.state.user.uid ? store.state.user.uid+\"|\"+store.state.user.userName : undefined, // // Share the tracking cookie across subdomains (see https://developer.matomo.org/guides/tracking-javascript-guide#measuring-domains-andor-sub-domains) // Default: undefined, example '*.example.com' cookieDomain: undefined, // Tell Matomo the website domain so that clicks on these domains are not tracked as 'Outlinks' // Default: undefined, example: '*.example.com' domains: undefined, // A list of pre-initialization actions that run before matomo is loaded // Default: [] // Example: [ // ['API_method_name', parameter_list], // ['setCustomVariable','1','VisitorType','Member'], // ['appendToTrackingUrl', 'new_visit=1'], // etc. // ] preInitActions: [] }); app.vue中拦截路由watch: { $route(to, from) { if (this.$matomo) { this.$matomo.deleteCookies(); if (localStorage.getItem('uid')) { this.$matomo.setUserId(localStorage.getItem('uid')); } if (localStorage.getItem('userName')) { this.$matomo.setCustomDimension(1, localStorage.getItem('userName')); } // 如果有路由传值值太长的话会matomo会监听不到并报414，就不能根据router自动注册了 this.$matomo.setCustomUrl(location.pathname); // 设置页面名称 this.$matomo.setDocumentTitle(to.meta.m_title); this.$matomo.trackPageView(); console.log(location.pathname, to.name, to.meta.m_title); } } }, 事件记录this.$matomo.trackEvent(category, action, actionName, actionValue); 使用自定义维度： 首先以超级管理员登录安装插件:Custom Dimension插件 然后在matomo后台配置action自定义维度 注意在事件中使用的dimension6序号必须与定义的id一致而不是名称。 this.$matomo.trackEvent(category, action, actionName, actionValue, { dimension6: resourceId, dimension7: fileId }); 参考网站： http://www.matomo.net.cn/piwik-features/ https://developer.matomo.org/api-reference/tracking-javascript https://developer.matomo.org/3.x/guides/tracking-javascript-guide","categories":[{"name":"web","slug":"web","permalink":"https://rainerpiao.github.io/categories/web/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://rainerpiao.github.io/tags/vue/"},{"name":"matomo","slug":"matomo","permalink":"https://rainerpiao.github.io/tags/matomo/"}]},{"title":"vue网页版集成百度地图定位","slug":"start-bmap","date":"2022-02-23T11:13:51.000Z","updated":"2022-02-23T09:39:53.527Z","comments":true,"path":"2022/02/23/start-bmap/","link":"","permalink":"https://rainerpiao.github.io/2022/02/23/start-bmap/","excerpt":"","text":"申请百度地图KEYhttps://lbsyun.baidu.com/ 可以给每个系统单独申请一个KEY. 我申请了3个端的key，如下： 在vue中集成百度地图我使用的是”vue”: “2.6.14”，在package中引入百度地图GL版本的VUE封装https://vue-bmap-gl.guyixi.cn/ “vue-bmap-gl”: “0.0.30” Vue项目中进行集成在main.js中配置百度分配的key,全局引用组件。 import VueBMapGL from 'vue-bmap-gl'; import 'vue-bmap-gl/dist/style.css'; Vue.use(VueBMapGL); VueBMapGL.initBMapApiLoader({ ak: process.env.BMAP_KEY, // 默认百度 sdk 版本为 1.0 v: '1.0' }); Vue开发相关页面主要功能：1、实现根据浏览器自动定位到当地；2、实现按关键字下拉搜索定位；3、实现坐标转换；4、地点拖拽定位并显示坐标。 目前国内主要有以下三种坐标系： WGS84：为一种大地坐标系，也是目前广泛使用的GPS全球卫星定位系统使用的坐标系。 GCJ02：又称火星坐标系，是由中国国家测绘局制订的地理信息系统的坐标系统。由WGS84坐标系经加密后的坐标系。 BD09：为百度坐标系，在GCJ02坐标系基础上再次加密。其中bd09ll表示百度经纬度坐标，bd09mc表示百度墨卡托米制坐标。 因web端使用的是百度坐标系BD09，手机端使用的是GCJ02。所以前端保存数据需要转换成GCJ02，以方便使用。 &lt;template&gt; &lt;div id=\"myMapContainer\"&gt; &lt;el-bmap class=\"bmap-box\" ref=\"refMap\" vid=\"bmapGL-vue\" :center=\"initMapCenter\" :zoom=\"map.zoom\" :events=\"map.events\"&gt; &lt;el-bmap-marker vid=\"component-marker\" v-if=\"marker.position\" :position=\"marker.position\" :events=\"marker.events\" :enableDragging=\"marker.enableDragging\" &gt;&lt;/el-bmap-marker&gt; &lt;/el-bmap&gt; &lt;el-card :body-style=\"{ 'max-height': '450px', 'overflow-y': 'scroll', padding: '0 0' }\" class=\"result-panel\" v-if=\"canEdit\" &gt; &lt;template slot=\"header\"&gt; &lt;template&gt; &lt;el-autocomplete popper-class=\"autoAddressClass\" v-model=\"address\" :fetch-suggestions=\"querySearchAsync\" :trigger-on-focus=\"false\" placeholder=\"请输入位置\" :debounce=\"500\" size=\"small\" @select=\"handleSelect\" clearable &gt; &lt;template slot-scope=\"{ item }\"&gt; &lt;div class=\"list-container\"&gt; &lt;div class=\"title\"&gt;{{ item.title }}&lt;/div&gt; &lt;span class=\"address ellipsis\"&gt;{{ item.address }}&lt;/span&gt; &lt;/div&gt; &lt;/template&gt; &lt;/el-autocomplete&gt; &lt;/template&gt; &lt;/template&gt; &lt;/el-card&gt; &lt;el-card v-if=\"marker.position &amp;&amp; canEdit\" :body-style=\"{ padding: '0 0' }\" class=\"info\" &gt; &lt;span&gt;坐标:&lt;/span&gt; &lt;el-input read-only ref=\"refLnglat\" :value=\"positionText\" size=\"small\" style=\"width: 180px\" /&gt; &lt;el-button @click=\"handleUpdatePosition\" size=\"small\" type=\"primary\"&gt;保存&lt;/el-button&gt; &lt;/el-card&gt; &lt;/div&gt; &lt;/template&gt; &lt;script&gt; export default { props: { positionInfo: { required: false, type: String }, canEdit: { required: false, type: Boolean, default: true } }, data() { return { map: { zoom: 17, events: { dblclick: e =&gt; { console.log('---event---: click', e); this.marker.position = [e.latlng.lng, e.latlng.lat]; } } }, marker: { position: [], visible: true, label: { content: '', style: { color: '#dcdcdc' } }, events: { dragend: e =&gt; { console.log('---event---: dragend', e); this.marker.position = [e.latLng.lng, e.latLng.lat]; } }, enableDragging: true }, address: null, results: [] // 搜索结果 }; }, created() { console.log('created', this.positionInfo); }, mounted() { if (this.positionInfo) { console.log('初始化位置', this.positionInfo); this.marker.position = this.positionInfo.split(','); // eslint-disable-next-line no-undef this.coordinateConvertor(this.marker.position, COORDINATES_GCJ02, COORDINATES_BD09, this.toBD09TranslateCallback); } else { console.log('自动定位到浏览器所在位置'); this.geolocation(); } }, computed: { initMapCenter() { if (this.$_.isEmpty(this.marker.position)) { console.log('初始化当前地图中心-默认成都'); return [104.07274727000174, 30.57899361531913]; // 默认成都 } else { console.log('初始化当前地图中心', this.marker.position); return this.marker.position; } }, positionText() { if (!this.marker.position) return ''; return `${this.marker.position[0]},${this.marker.position[1]}`; } }, methods: { getMap() { console.log(this.$refs.refMap.$$getInstance()); return this.$refs.refMap.$$getInstance(); }, handleUpdatePosition() { console.log('handleUpdatePosition.....', this.$refs.refLnglat.value); // eslint-disable-next-line no-undef this.coordinateConvertor(this.marker.position, COORDINATES_BD09, COORDINATES_GCJ02, this.toGCJ02TranslateCallback); }, /** * 浏览器定位函数 * enableHighAccuracy：是否要求浏览器获取最佳效果，默认为false */ geolocation() { const that = this; const geolocation = new BMapGL.Geolocation(); geolocation.getCurrentPosition( function (res) { // eslint-disable-next-line no-undef if (this.getStatus() == BMAP_STATUS_SUCCESS) { that.getAddrByPoint(res.point); // 当成功时，调用逆地址解析函数 } else { alert('浏览器定位失败：' + this.getStatus()); // 失败时，弹出失败状态码 } }, { enableHighAccuracy: true } ); }, /** * 逆地址解析函数（根据坐标点获取详细地址） * @param {Object} point 百度地图坐标点，必传 */ getAddrByPoint(point) { console.log('local point', point); const that = this; const geco = new BMapGL.Geocoder(); geco.getLocation(point, function (res) { console.log(res); // 内容见下图 const position = [res.point.lng, res.point.lat]; that.marker.position = position; // 重新设置标注的地理坐标 // that.marker.label.content = res.address; // 记录该点的详细地址信息 }); }, querySearchAsync(str, cb) { console.log('querySearchAsync:', str); const options = { onSearchComplete: function (res) { // 检索完成后的回调函数 const s = []; // eslint-disable-next-line no-undef if (local.getStatus() == BMAP_STATUS_SUCCESS) { for (let i = 0; i &lt; res.getCurrentNumPois(); i++) { s.push(res.getPoi(i)); } cb(s); // 获取到数据时，通过回调函数cb返回到&lt;el-autocomplete&gt;组件中进行显示 } else { cb(s); } } }; const local = new BMapGL.LocalSearch(this.getMap(), options); // 创建LocalSearch构造函数 local.search(str); // 调用search方法，根据检索词str发起检索 }, handleSelect(item) { console.log('handleSelect', item); this.address = item.address + item.title; // 记录详细地址，含建筑物名 const point = [item.point.lng, item.point.lat]; this.marker.position = point; // 重新设置标注的地理坐标 }, /** * 坐标常量说明： * COORDINATES_WGS84 = 1, WGS84坐标 * COORDINATES_WGS84_MC = 2, WGS84的平面墨卡托坐标 * COORDINATES_GCJ02 = 3，GCJ02坐标 * COORDINATES_GCJ02_MC = 4, GCJ02的平面墨卡托坐标 * COORDINATES_BD09 = 5, 百度bd09经纬度坐标 * COORDINATES_BD09_MC = 6，百度bd09墨卡托坐标 * COORDINATES_MAPBAR = 7，mapbar地图坐标 * COORDINATES_51 = 8，51地图坐标 */ coordinateConvertor(point, fromCoordinate, toCoordinate, callback) { console.log(`坐标转换,${point}按坐标系${fromCoordinate}转换成${toCoordinate}`); setTimeout(() =&gt; { const convertor = new BMapGL.Convertor(); const pointArr = []; pointArr.push(new BMapGL.Point(point[0], point[1])); convertor.translate(pointArr, fromCoordinate, toCoordinate, callback); }, 1000); }, toBD09TranslateCallback(data) { console.log('坐标转换成百度之后的回调函数', data); // eslint-disable-next-line no-undef if (data.status === BMAP_STATUS_SUCCESS) { const afterPoint = data.points[0]; console.log('转换后的BD09坐标：', afterPoint); this.marker.position = [afterPoint.lng, afterPoint.lat]; } }, toGCJ02TranslateCallback(data) { console.log('坐标转换成高德之后的回调函数', data); // eslint-disable-next-line no-undef if (data.status === BMAP_STATUS_SUCCESS) { const afterPoint = data.points[0]; const GCJ02 = `${afterPoint.lng},${afterPoint.lat}`; console.log('转换后的GCJ02坐标：', GCJ02); this.$emit('setPosition', GCJ02); } } } }; &lt;/script&gt; &lt;style rel=\"stylesheet/scss\" lang=\"scss\"&gt; #myMapContainer { .el-autocomplete { .el-input { position: relative; font-size: 14px; display: inline-block; width: 380px; } } } &lt;/style&gt; &lt;style rel=\"stylesheet/scss\" lang=\"scss\" scoped&gt; #myMapContainer { width: 100%; height: 600px; } .result-panel { position: absolute; left: 10px; top: 10px; display: flex; flex-direction: column; } .autoAddressClass { .list-container { overflow: hidden; border-bottom: 1px $color_line_split solid; } li { i.el-icon-search { margin-top: 11px; } .mgr10 { margin-right: 10px; } .title { text-overflow: ellipsis; overflow: hidden; } .address { line-height: 1; font-size: 12px; color: $color_back; margin-bottom: 5px; } } } .info { position: absolute; right: 50px; top: 10px; padding: 18px 20px; background-color: #fff; } &lt;/style&gt; 最终效果自动定位到当地 搜索效果 到这里，整个流程都通了，你也可以试试哦！有问题大家可以给我留言，一起交流学习吧！","categories":[{"name":"web","slug":"web","permalink":"https://rainerpiao.github.io/categories/web/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://rainerpiao.github.io/tags/vue/"},{"name":"element-ui","slug":"element-ui","permalink":"https://rainerpiao.github.io/tags/element-ui/"},{"name":"vue-bmap-gl","slug":"vue-bmap-gl","permalink":"https://rainerpiao.github.io/tags/vue-bmap-gl/"}]},{"title":"vue网页版集成高德地图定位","slug":"start-amap","date":"2022-01-12T10:16:30.000Z","updated":"2022-02-23T09:39:47.692Z","comments":true,"path":"2022/01/12/start-amap/","link":"","permalink":"https://rainerpiao.github.io/2022/01/12/start-amap/","excerpt":"","text":"申请高德开发keyhttps://console.amap.com/dev/index 可以给每个系统单独申请一个KEY. 我申请了3个端的key，如下： Vue中集成高德AMap-Vue 是一个基于 Vue.js 的高德地图 AMap JSAPI 封装。https://jimnox.gitee.io/amap-vue/ 项目是V2.16版本，集成最新版本为”@amap/amap-vue”: “2.0.13” 高德地图兼容性 AMapVue建议搭配vue &gt;= 2.6.11, AMap 2.0版本使用 如果您在使用AMap 1.4.*，请搭配AMapVue 1.4.*使用 Vue项目中进行集成vue2+element-ui项目按需加载为例： 第一步：首先在main.js中配置高德分配的key import AmapVueConfig from '@amap/amap-vue/lib/config'; AmapVueConfig.key = process.env.AMAP_KEY; 第二步：在app.vue中设置安全秘钥 如果是内网，浏览器设置的代理需要有高德的访问权限 高德自2021年12月02日升级，升级之后所申请的 key 必须配备安全密钥 jscode 一起使用。 ​ AMAP_KEY: ‘“你申请的key”‘ AMAP_JSCODE: ‘“你申请的key对应的jscode”‘, ​ AMAP_JSCODE_NGINX: ‘“https://XXX.com/_AMapService\"' /** * 高德地图安全秘钥设置 */ mounted() { if (process.env.NODE_ENV === 'local') { window._AMapSecurityConfig = { securityJsCode: process.env.AMAP_JSCODE // 开发环境采用，直接配置你的jscode }; } else { window._AMapSecurityConfig = { serviceHost: process.env.AMAP_JSCODE_NGINX // 生产\\测试环境采用：通过下面的反向代理 }; } } 第三步：在nginx中配置高德反向代理，开发阶段不用配置 如果是内网访问，nginx需要开通访问外网的防火墙。 # 自定义地图服务代理 location /_AMapService/v4/map/styles { set $args \"$args&amp;jscode=你的jscode\"; proxy_pass https://webapi.amap.com/v4/map/styles; } # Web服务API代理 location /_AMapService/ { set $args \"$args&amp;jscode=你的jscode\"; proxy_pass https://restapi.amap.com/; } vue功能中使用高德地图新建一个myMap.vue，内容如下 &lt;template&gt; &lt;div id=\"myMapContainer\"&gt; &lt;amap cache-key=\"coord-picker-map\" :center=\"initPosition\" mmap-style=\"amap://styles/whitesmoke\" async :zoom=\"13\" is-hotspot @click=\"onMapClick\"&gt; &lt;MapComponent ref=\"refMapComponent\" :positionInfo=\"positionInfo\" @updatePosition=\"handleUpdatePosition\" /&gt; &lt;/amap&gt; &lt;/div&gt; &lt;/template&gt; &lt;script&gt; import Amap from '@amap/amap-vue/lib/amap'; // import AmapMarker from '@amap/amap-vue/lib/marker' import MapComponent from './mapComponent.vue'; export default { components: { Amap, MapComponent }, props: { positionInfo: { required: false, type: String } }, data() { return { center: null }; }, created() { console.log('created', this.positionInfo); }, computed: { initPosition() { console.log('初始化当前地图中心', this.positionInfo); if (this.positionInfo) { console.log('初始化位置', this.positionInfo); return this.positionInfo.split(','); } else { return null; } } }, methods: { onMapClick(e) { console.log('onMapClick.....', e); if (e.lnglat) { this.$refs.refMapComponent.position = [e.lnglat.lng, e.lnglat.lat]; } else { this.$refs.refMapComponent.position = null; } }, handleUpdatePosition(position) { console.log('handleUpdatePosition.....', position); this.$emit('setPosition', position); } } }; &lt;/script&gt; &lt;style rel=\"stylesheet/scss\" lang=\"scss\" scoped&gt; #myMapContainer { width: 100%; height: 600px; } &lt;/style&gt; 再新建一个mapComponent.vue,内容如下 &lt;template&gt; &lt;div class=\"my-custom-map-component\"&gt; &lt;amap-marker v-if=\"position\" :position.sync=\"position\" :label=\"{ content: hover ? hover.name : '', direction: 'top' }\" draggable /&gt; &lt;el-card :body-style=\"{ 'max-height': '450px', 'overflow-y': 'scroll', padding: '0 0' }\" class=\"result-panel\" &gt; &lt;template slot=\"header\"&gt; &lt;template v-if=\"mode === 'search'\"&gt; &lt;el-autocomplete v-model=\"query\" :fetch-suggestions=\"autoCompleteAsync\" placeholder=\"请输入内容\" :debounce=\"500\" size=\"small\" /&gt; &lt;el-button @click=\"search(true)\" :disabled=\"!query\" size=\"small\" type=\"primary\"&gt;搜索&lt;/el-button&gt; &lt;/template&gt; &lt;template v-if=\"mode === 'result'\"&gt; &lt;div class=\"result-title\"&gt; &lt;el-button icon=\"el-icon-arrow-left\" @click=\"reset\" size=\"small\" style=\"margin-right: 6px\" /&gt; &lt;span class=\"count\"&gt;共 {{ searching ? '...' : total }} 条结果&lt;/span&gt; &lt;/div&gt; &lt;/template&gt; &lt;/template&gt; &lt;div v-if=\"mode === 'result' &amp;&amp; total &gt; 0\" size=\"small\" class=\"result-list\"&gt; &lt;el-pagination small style=\"padding-top: 20px; padding-bottom: 20px\" layout=\"prev, pager, next\" :page-size=\"pageSize\" :current-page.sync=\"pageIndex\" :total=\"total\" /&gt; &lt;div v-for=\"item in results\" :key=\"item.id\"&gt; &lt;div class=\"item-title\" @click=\"focus(item)\"&gt;{{ item.name }}&lt;/div&gt; &lt;div class=\"item-addr\"&gt;{{ item.address }}&lt;/div&gt; &lt;el-divider&gt;&lt;/el-divider&gt; &lt;/div&gt; &lt;el-pagination small style=\"padding-bottom: 20px\" layout=\"prev, pager, next\" :page-size=\"pageSize\" :current-page.sync=\"pageIndex\" :total=\"total\" /&gt; &lt;/div&gt; &lt;/el-card&gt; &lt;el-card v-if=\"position\" :body-style=\"{ padding: '0 0' }\" class=\"info\" &gt; &lt;span&gt;坐标:&lt;/span&gt; &lt;el-input read-only :value=\"positionText\" size=\"small\" style=\"width: 180px\" /&gt; &lt;el-button @click=\"surePosition\" size=\"small\" type=\"primary\"&gt;保存&lt;/el-button&gt; &lt;/el-card&gt; &lt;/div&gt; &lt;/template&gt; &lt;script&gt; import { withAmap, loadPlugins } from '@amap/amap-vue'; import AmapMarker from '@amap/amap-vue/lib/marker'; export default { name: 'MapComponent', components: { AmapMarker }, mixins: [withAmap], props: { positionInfo: { required: false, type: String } }, data() { return { mode: 'search', query: '', searching: false, tips: [], results: [], total: 0, hover: null, position: null, pageIndex: 1, pageSize: 20 }; }, watch: { pageIndex(value) { this.ps.setPageIndex(value); this.search(false); } }, computed: { positionText() { if (!this.position) return ''; return `${this.position[0]},${this.position[1]}`; } }, async mounted() { await loadPlugins(['AMap.AutoComplete', 'AMap.PlaceSearch']); // eslint-disable-next-line no-undef this.ps = new AMap.PlaceSearch({ pageSize: this.pageSize }); // eslint-disable-next-line no-undef this.ac = new AMap.AutoComplete(); if (this.positionInfo) { console.log('初始化位置', this.positionInfo); // eslint-disable-next-line no-undef this.position = this.positionInfo.split(','); } }, methods: { handleCurrentChange(val) { console.log('handleCurrentChange', val); this.pageIndex = val; }, async search(clear = false) { console.log('search', clear); this.mode = 'result'; if (clear) { this.results = []; this.total = 0; this.pageIndex = 1; this.ps.setPageIndex(1); } this.searching = true; const { query } = this; this.ps.search(query, (status, result) =&gt; { this.searching = false; if (query !== this.query) return; if (status === 'complete' &amp;&amp; result.poiList) { this.results = result.poiList.pois; this.total = result.poiList.count; this.fitView(); } else { this.results = []; this.total = 0; } }); }, autoCompleteAsync(kw, cb) { console.log('1、autoCompleteAsync......', kw); if (!kw) { this.tips = []; cb(this.tips); } else { this.ac.search(kw, (status, result) =&gt; { if (status === 'complete' &amp;&amp; result.tips) { console.log('2、autoCompleteAsync......', kw); const textArray = Array.from(new Set(result.tips.map(tip =&gt; tip.name))); this.tips = textArray.map(item =&gt; { return { value: item }; }); cb(this.tips); } else { this.tips = []; cb(this.tips); } }); } }, focus(poi) { const pos = [poi.location.lng, poi.location.lat]; this.hover = poi; this.$map.setCenter(pos); this.position = [...pos]; }, fitView() { requestAnimationFrame(() =&gt; { this.$map.setFitView(null, false, [0, 0, 300, 0]); this.focus(this.results[0]); }); }, reset() { this.ps.setPageIndex(1); this.results = []; this.tips = []; this.total = 0; this.mode = 'search'; }, surePosition() { console.log(this.positionText); console.log(this.position); this.$emit('updatePosition', this.positionText); } } }; &lt;/script&gt; &lt;style rel=\"stylesheet/scss\" lang=\"scss\" scoped&gt; .my-custom-map-component { .result-panel { position: absolute; left: 10px; top: 10px; width: 300px; display: flex; flex-direction: column; .result-list { margin: 0 12px; } .result-list.ant-list-loading { min-height: 100px; display: flex; justify-content: center; align-items: center; } .result-title { .count { font-size: 14px; color: #999; } } .item-title { cursor: pointer; font-size: 16px; font-weight: 600; } .item-addr { font-size: 14px; color: #999; margin-top: 20px; } } .info { position: absolute; right: 10px; top: 10px; padding: 18px 20px; background-color: #fff; } } &lt;/style&gt; 在使用该定位的页面增加如下代码： import MyMap from ‘views/components/map-location/myMap.vue’; &lt;div v-if=\"showMap\"&gt; &lt;el-dialog :append-to-body=\"true\" title=\"定位设置\" :visible.sync=\"showMap\" :show-close=\"true\" :close-on-click-modal=\"false\" top=\"1vh\" width=\"80%\"&gt; &lt;MyMap :positionInfo.sync=\"punchAddress\" @setPosition=\"handleSetPosition\" /&gt; &lt;/el-dialog&gt; &lt;/div&gt; 最终效果通过关键字搜索，选择定位地址后会自动获取到坐标。 到这里，整个流程都通了，你也可以试试哦！有问题大家可以给我留言，一起交流学习吧！","categories":[{"name":"web","slug":"web","permalink":"https://rainerpiao.github.io/categories/web/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://rainerpiao.github.io/tags/nginx/"},{"name":"vue","slug":"vue","permalink":"https://rainerpiao.github.io/tags/vue/"},{"name":"element-ui","slug":"element-ui","permalink":"https://rainerpiao.github.io/tags/element-ui/"},{"name":"AMapVue","slug":"AMapVue","permalink":"https://rainerpiao.github.io/tags/AMapVue/"}]},{"title":"web攻击技术有哪些","slug":"web-attack-method","date":"2022-01-09T13:58:08.000Z","updated":"2022-01-12T09:43:47.786Z","comments":true,"path":"2022/01/09/web-attack-method/","link":"","permalink":"https://rainerpiao.github.io/2022/01/09/web-attack-method/","excerpt":"","text":"web攻击技术有哪些","categories":[{"name":"web","slug":"web","permalink":"https://rainerpiao.github.io/categories/web/"}],"tags":[{"name":"web","slug":"web","permalink":"https://rainerpiao.github.io/tags/web/"},{"name":"attack","slug":"attack","permalink":"https://rainerpiao.github.io/tags/attack/"}]},{"title":"mac中使用shell命令发送邮件","slug":"hello-shell-mail","date":"2022-01-08T15:53:09.000Z","updated":"2022-01-12T09:41:07.076Z","comments":true,"path":"2022/01/08/hello-shell-mail/","link":"","permalink":"https://rainerpiao.github.io/2022/01/08/hello-shell-mail/","excerpt":"","text":"mac中使用shell命令发送邮件首先查看mail命令： mail -h mail: illegal option -- h Usage: mail [-EiInv] [-s subject] [-c cc-addr] [-b bcc-addr] [-F] to-addr ... mail [-EHiInNv] [-F] -f [name] mail [-EHiInNv] [-F] [-u user] mail -e [-f name] mail -H 发送邮件1邮件内容和标题不支持中文 echo 'hello email' | mail -s 'https://rainerpiao.github.io' user@qq.com 发送邮件2读取文件中的内容进行发送，支持中文内容, 但标题不支持中文。 cat test.txt | mail -s 'https://rainerpiao.github.io' user@qq.com mail -s \"https://rainerpiao.github.io\" user@qq.com&lt;test.txt 发送邮件3同时发送给多个收件人, 空格隔开 cat test.txt | mail -s 'https://rainerpiao.github.io' user1@qq.com user2@qq.com 发送邮件4发送邮件同时抄送给其他人 echo 'hello cc' | mail -s 'https://rainerpiao.github.io' -c \"useq@126.com\" user@qq.com 发送邮件5同时抄送并密送给其他人, 同时抄送多个人用;分割，并加引号””包含 echo 'hello cc bcc' | mail -s 'hello test' -c \"user1@126.com\" -b \"user2@qq.com\" user3@126.com echo 'hello cc bcc' | mail -s 'hello mail123' -c 'use1@gmail.com;use2@126.com' -b us3@qq.com us4@126.com","categories":[{"name":"shell","slug":"shell","permalink":"https://rainerpiao.github.io/categories/shell/"}],"tags":[{"name":"shell","slug":"shell","permalink":"https://rainerpiao.github.io/tags/shell/"},{"name":"mail","slug":"mail","permalink":"https://rainerpiao.github.io/tags/mail/"}]},{"title":"文档编辑工具Typora之图片自动上传插件PicGo","slug":"hello-typora-picgo","date":"2022-01-05T00:43:28.000Z","updated":"2022-01-12T09:41:00.267Z","comments":true,"path":"2022/01/05/hello-typora-picgo/","link":"","permalink":"https://rainerpiao.github.io/2022/01/05/hello-typora-picgo/","excerpt":"","text":"Typora中使用上传图片插件 我们使用Typora写Markdown文档很方便，但是引用图片时候只能使用url让人感觉很不方便，其实我们可以使用图床来存我们的图片素材，可以在编写文档通过插件自动上传到我们的图床中，相当方便。 安装PicGo插件 一个用于快速上传图片并获取图片 URL 链接的工具，PicGo上传之后，会自动将上传成功的URL复制到你的剪贴板，支持5种复制格式。 PicGo https://picgo.github.io/PicGo-Doc/zh/guide/getting-started.html 注册SM. MS账号 图床申请https://sm.ms/login，可以免费使用5G空间，每张图不超过5M. 在PicGo中配置SM. MS配置token 注册并登录smms后台获取token值。 PicGo插件安装安装smms-user 1.0.8、autocopy 1.0.5插件，可在《设置》选项中进行一些参数设置。","categories":[{"name":"建站","slug":"建站","permalink":"https://rainerpiao.github.io/categories/%E5%BB%BA%E7%AB%99/"}],"tags":[{"name":"Typora","slug":"Typora","permalink":"https://rainerpiao.github.io/tags/Typora/"},{"name":"Markdown","slug":"Markdown","permalink":"https://rainerpiao.github.io/tags/Markdown/"},{"name":"PicGo","slug":"PicGo","permalink":"https://rainerpiao.github.io/tags/PicGo/"},{"name":"SM.MS","slug":"SM-MS","permalink":"https://rainerpiao.github.io/tags/SM-MS/"}]},{"title":"使用Hexo和Github搭建博客","slug":"hello-hexo","date":"2021-12-26T10:16:30.000Z","updated":"2022-01-12T09:41:35.211Z","comments":true,"path":"2021/12/26/hello-hexo/","link":"","permalink":"https://rainerpiao.github.io/2021/12/26/hello-hexo/","excerpt":"","text":"使用Hexo和Github搭建博客 自己作为程序员也工作十几年，居然没有自己的博客[捂脸]，毕竟有时候记录技术和自己的感悟也方便一些。记得以前使用tomcat+jsp搭建blog，全部都要自己写页面，现在发现通过Hexo搭建，还有很多好看的主题，顿时感觉幸福多了。说干就干，中间因为 Github 更换了登录验证方式（现在使用token验证了）耽误了一些时间，最终也差不多二天时间搞定，下面来介绍下具体的步骤： Step1 注册github账号给大家介绍搭建的博客是部署在 Github 上的，所以肯定是要有一个 Github 账号的，没有的小伙伴去注册一个吧。 Step2 本地环境安装本机安装Node、Git、 Hexo，版本信息如下： deMacBook-Pro:blog xxx$ hexo -versionINFO Validating confighexo: 5.4.0hexo-cli: 4.3.0os: darwin 20.1.0 11.0.1 node: 15.13.0v8: 8.6.395.17-node.28uv: 1.41.0zlib: 1.2.11brotli: 1.0.9ares: 1.17.1modules: 88nghttp2: 1.42.0napi: 8llhttp: 2.1.3openssl: 1.1.1j+quiccldr: 38.1icu: 68.2tz: 2020dunicode: 13.0ngtcp2: 0.1.0-DEVnghttp3: 0.1.0-DEV Step3 初始化Hexo项目hexo init blog 新建完成后，指定文件夹目录下有：node_modules: 依赖包public：存放生成的页面scaffolds：生成文章的一些模板source：用来存放你的文章themes：主题_config.yml: 博客的配置文件 在该目录下安装依赖cd blognpm install Step4 启动Hexo服务Hexo g &amp; Hexo s hexo常用命令hexo clean # 删除编译缓存hexo g == hexo generate #编译hexo s == hexo server #启动服务预览hexo d == hexo deploy #部署到github Step5 github上创建repostiy创建项目名为rainerpiao.github.io，用于创建编译好的html https://github.com/rainerpiao/rainerpiao.github.io.git 进入rainerpiao.github.io项目路径setting/pages: 设置github pages信息 Step6 github上创建blog项目创建项目名为hexoblog，用于存放源码 Step7 本机生成SSH并添加到github在项目根目录下_config.yml文件中配置blog地址：deploy: type: git repo: https://github.com/rainerpiao/rainerpiao.git branch: master 执行hexo d 失败：remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.remote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.fatal: ‘https://github.com/rainerpiao/blog.git/' 鉴权失败 本地git配置git config user.namegit config user.emailgit配置git config –global user.name “rainerpiao”git config –global user.email “156572992@qq.com“ 然后创建SSH, 一路回车ssh-keygen -t rsa -C “156572992@qq.com“ 生成的key在目录/Users/XXX/.ssh/下生成文件目录：id_rsa、id_rsa.pub、known_hostsssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。 登录https://github.com/settings/keys 添加ssh key复制id_rsa.pub内容到key中，测试是否联通：ssh -T git@github.com Step8 主题配置主题配置hexo-theme-matery, 个人比较喜欢这个主题，另外hueman主题也还不错。 遇到的问题：发现部署到github后控制台报 lightgallery-all.min.js net:: ERR_ABORTED 404，导致吸顶样式等一些问题，解决方案：到 https://www.bootcdn.cn/ 查找对应的cdn资源，将主题下的_config.yml配置修改成 jquery: https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.min.js lightgallery: https://cdn.bootcdn.net/ajax/libs/lightgallery/1.10.0/js/lightgallery-all.min.js","categories":[{"name":"建站","slug":"建站","permalink":"https://rainerpiao.github.io/categories/%E5%BB%BA%E7%AB%99/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://rainerpiao.github.io/tags/Hexo/"},{"name":"Github","slug":"Github","permalink":"https://rainerpiao.github.io/tags/Github/"}]}],"categories":[{"name":"web","slug":"web","permalink":"https://rainerpiao.github.io/categories/web/"},{"name":"shell","slug":"shell","permalink":"https://rainerpiao.github.io/categories/shell/"},{"name":"建站","slug":"建站","permalink":"https://rainerpiao.github.io/categories/%E5%BB%BA%E7%AB%99/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://rainerpiao.github.io/tags/vue/"},{"name":"matomo","slug":"matomo","permalink":"https://rainerpiao.github.io/tags/matomo/"},{"name":"element-ui","slug":"element-ui","permalink":"https://rainerpiao.github.io/tags/element-ui/"},{"name":"vue-bmap-gl","slug":"vue-bmap-gl","permalink":"https://rainerpiao.github.io/tags/vue-bmap-gl/"},{"name":"nginx","slug":"nginx","permalink":"https://rainerpiao.github.io/tags/nginx/"},{"name":"AMapVue","slug":"AMapVue","permalink":"https://rainerpiao.github.io/tags/AMapVue/"},{"name":"web","slug":"web","permalink":"https://rainerpiao.github.io/tags/web/"},{"name":"attack","slug":"attack","permalink":"https://rainerpiao.github.io/tags/attack/"},{"name":"shell","slug":"shell","permalink":"https://rainerpiao.github.io/tags/shell/"},{"name":"mail","slug":"mail","permalink":"https://rainerpiao.github.io/tags/mail/"},{"name":"Typora","slug":"Typora","permalink":"https://rainerpiao.github.io/tags/Typora/"},{"name":"Markdown","slug":"Markdown","permalink":"https://rainerpiao.github.io/tags/Markdown/"},{"name":"PicGo","slug":"PicGo","permalink":"https://rainerpiao.github.io/tags/PicGo/"},{"name":"SM.MS","slug":"SM-MS","permalink":"https://rainerpiao.github.io/tags/SM-MS/"},{"name":"Hexo","slug":"Hexo","permalink":"https://rainerpiao.github.io/tags/Hexo/"},{"name":"Github","slug":"Github","permalink":"https://rainerpiao.github.io/tags/Github/"}]}